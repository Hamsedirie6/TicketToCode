@page "/books"
@inject BookService BookService
@using LibraryFrontend.Models
@inject IJSRuntime JS

<h3>B√∂cker</h3>

@if (books == null)
{
    <p>Laddar...</p>
}
else if (books.Count == 0)
{
    <p>Inga b√∂cker tillg√§ngliga.</p>
}
else
{
    <ul>
        @foreach (var book in books)
        {
            <li>
                <strong>@book.Title</strong> av @book.Author (@book.Genre)
                ‚Äì @(book.IsAvailable ? "Tillg√§nglig" : "Ej tillg√§nglig")

                <!-- Tillf√§llig admin-knapp, vi l√§gger till rollstyrning senare -->
                <button class="btn btn-sm btn-danger ms-2" @onclick="() => DeleteBook(book.Id)">üóëÔ∏è Ta bort</button>
            </li>
        }
    </ul>
}

<hr />

<h4>L√§gg till ny bok</h4>

<EditForm Model="newBook" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label>Titel:</label><br />
        <InputText @bind-Value="newBook.Title" class="form-control" />
    </div>

    <div class="mb-2">
        <label>F√∂rfattare:</label><br />
        <InputText @bind-Value="newBook.Author" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Genre:</label><br />
        <InputText @bind-Value="newBook.Genre" class="form-control" />
    </div>

    <div class="mt-2">
        <button class="btn btn-primary" type="submit">L√§gg till bok</button>
    </div>
</EditForm>

@if (formMessage != null)
{
    <p class="@(formMessage.StartsWith("‚ùå") || formMessage.StartsWith("üî•") || formMessage.StartsWith("üö´") ? "text-danger" : "text-success")">
        @formMessage
    </p>
}

@code {
    private List<Book>? books;
    private Book newBook = new Book();
    private string? formMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        try
        {
            books = await BookService.GetAllBooks();
        }
        catch (Exception ex)
        {
            formMessage = $"üî• FEL vid laddning av b√∂cker: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        newBook.IsAvailable = true;

        try
        {
            var success = await BookService.AddBook(newBook);
            if (success)
            {
                formMessage = "‚úÖ Boken har lagts till!";
                newBook = new Book();
                await LoadBooks();
            }
            else
            {
                formMessage = "‚ùå Misslyckades att l√§gga till boken.";
            }
        }
        catch (Exception ex)
        {
            formMessage = $"üî• FEL: {ex.Message}";
        }
    }

    private async Task DeleteBook(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "√Ñr du s√§ker p√• att du vill ta bort denna bok?");
        if (!confirm) return;

        var result = await BookService.DeleteBook(id);
        if (result)
        {
            formMessage = "‚ùå Boken har tagits bort.";
            await LoadBooks();
        }
        else
        {
            formMessage = "üö´ Misslyckades att ta bort boken.";
        }
    }
}

